//
// PrivateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class PrivateAPI {
    /**
     Aggiornamento stato risposta numero rosso
     
     - parameter idIstanza: (path) id istanza 
     - parameter idRisposta: (path) id risposta 
     - parameter notificaLettura: (body) informazione sullo stato da assegnare alla risposta 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aggiornaStatoLetturaRisposta(idIstanza: String, idRisposta: String, notificaLettura: NotificaLettura, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IstanzeReadResponse?,_ error: Error?) -> Void)) {
        aggiornaStatoLetturaRispostaWithRequestBuilder(idIstanza: idIstanza, idRisposta: idRisposta, notificaLettura: notificaLettura).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Aggiornamento stato risposta numero rosso
     - PATCH /istanze/{idIstanza}/risposta/{idRisposta}
     - Aggiorna lo stato della risposta relativa all'istanza numero rosso
     - API Key:
       - type: apiKey OAM_REMOTE_USER 
       - name: OHS
     - API Key:
       - type: apiKey X-EXTERNAL-REMOTE-USER 
       - name: OSB
     - parameter idIstanza: (path) id istanza 
     - parameter idRisposta: (path) id risposta 
     - parameter notificaLettura: (body) informazione sullo stato da assegnare alla risposta 
     - returns: RequestBuilder<IstanzeReadResponse> 
     */
    open class func aggiornaStatoLetturaRispostaWithRequestBuilder(idIstanza: String, idRisposta: String, notificaLettura: NotificaLettura) -> RequestBuilder<IstanzeReadResponse> {
        var path = "/istanze/{idIstanza}/risposta/{idRisposta}"
        let idIstanzaPreEscape = "\(APIHelper.mapValueToPathItem(idIstanza))"
        let idIstanzaPostEscape = idIstanzaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{idIstanza}", with: idIstanzaPostEscape, options: .literal, range: nil)
        let idRispostaPreEscape = "\(APIHelper.mapValueToPathItem(idRisposta))"
        let idRispostaPostEscape = idRispostaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{idRisposta}", with: idRispostaPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notificaLettura)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IstanzeReadResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Recupera il numero di istanze con risposte non lette
     
     - parameter X_CLIENT_ID: (header) Identificativo del chiamante 
     - parameter X_EXTERNAL_JWT: (header) rappresenta il token applicativo nel quale gestire eventuali informazioni di contesto e sessione (optional)
     - parameter X_CORRELATION_ID: (header) identificativo richiesta, utilizzato per correlare tra loro una sequenza di eventi o azioni attivate da una singola richiesta web (optional)
     - parameter unreadOnly: (query) booleano, se true restituisce solo il numero delle istanze che presentano risposte non lette (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCountRisposteNonLette(X_CLIENT_ID: String, X_EXTERNAL_JWT: String? = nil, X_CORRELATION_ID: String? = nil, unreadOnly: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IstanzeCountResponse?,_ error: Error?) -> Void)) {
        getCountRisposteNonLetteWithRequestBuilder(X_CLIENT_ID: X_CLIENT_ID, X_EXTERNAL_JWT: X_EXTERNAL_JWT, X_CORRELATION_ID: X_CORRELATION_ID, unreadOnly: unreadOnly).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recupera il numero di istanze con risposte non lette
     - GET /istanze/count
     - Recupera il numero totale di risposte non lette per tutte le istanze numero rosso
     - API Key:
       - type: apiKey OAM_REMOTE_USER 
       - name: OHS
     - API Key:
       - type: apiKey X-EXTERNAL-REMOTE-USER 
       - name: OSB
     - parameter X_CLIENT_ID: (header) Identificativo del chiamante 
     - parameter X_EXTERNAL_JWT: (header) rappresenta il token applicativo nel quale gestire eventuali informazioni di contesto e sessione (optional)
     - parameter X_CORRELATION_ID: (header) identificativo richiesta, utilizzato per correlare tra loro una sequenza di eventi o azioni attivate da una singola richiesta web (optional)
     - parameter unreadOnly: (query) booleano, se true restituisce solo il numero delle istanze che presentano risposte non lette (optional)
     - returns: RequestBuilder<IstanzeCountResponse> 
     */
    open class func getCountRisposteNonLetteWithRequestBuilder(X_CLIENT_ID: String, X_EXTERNAL_JWT: String? = nil, X_CORRELATION_ID: String? = nil, unreadOnly: Bool? = nil) -> RequestBuilder<IstanzeCountResponse> {
        let path = "/istanze/count"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "unreadOnly": unreadOnly?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-CLIENT-ID": X_CLIENT_ID.encodeToJSON(),
            "X-EXTERNAL-JWT": X_EXTERNAL_JWT?.encodeToJSON(),
            "X-CORRELATION-ID": X_CORRELATION_ID?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IstanzeCountResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Ricerca un istanza per id
     
     - parameter X_CLIENT_ID: (header) Identificativo del chiamante 
     - parameter idIstanza: (path) Id dell&#39;istanza numero rosso da ritornare 
     - parameter X_EXTERNAL_JWT: (header) rappresenta il token applicativo nel quale gestire eventuali informazioni di contesto e sessione (optional)
     - parameter X_CORRELATION_ID: (header) identificativo richiesta, utilizzato per correlare tra loro una sequenza di eventi o azioni attivate da una singola richiesta web (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIstanzaById(X_CLIENT_ID: String, idIstanza: String, X_EXTERNAL_JWT: String? = nil, X_CORRELATION_ID: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IstanzaResponse?,_ error: Error?) -> Void)) {
        getIstanzaByIdWithRequestBuilder(X_CLIENT_ID: X_CLIENT_ID, idIstanza: idIstanza, X_EXTERNAL_JWT: X_EXTERNAL_JWT, X_CORRELATION_ID: X_CORRELATION_ID).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ricerca un istanza per id
     - GET /istanze/{idIstanza}
     - Ritorna una singola istanza numero rosso a partire da un id
     - API Key:
       - type: apiKey OAM_REMOTE_USER 
       - name: OHS
     - API Key:
       - type: apiKey X-EXTERNAL-REMOTE-USER 
       - name: OSB
     - parameter X_CLIENT_ID: (header) Identificativo del chiamante 
     - parameter idIstanza: (path) Id dell&#39;istanza numero rosso da ritornare 
     - parameter X_EXTERNAL_JWT: (header) rappresenta il token applicativo nel quale gestire eventuali informazioni di contesto e sessione (optional)
     - parameter X_CORRELATION_ID: (header) identificativo richiesta, utilizzato per correlare tra loro una sequenza di eventi o azioni attivate da una singola richiesta web (optional)
     - returns: RequestBuilder<IstanzaResponse> 
     */
    open class func getIstanzaByIdWithRequestBuilder(X_CLIENT_ID: String, idIstanza: String, X_EXTERNAL_JWT: String? = nil, X_CORRELATION_ID: String? = nil) -> RequestBuilder<IstanzaResponse> {
        var path = "/istanze/{idIstanza}"
        let idIstanzaPreEscape = "\(APIHelper.mapValueToPathItem(idIstanza))"
        let idIstanzaPostEscape = idIstanzaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{idIstanza}", with: idIstanzaPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-CLIENT-ID": X_CLIENT_ID.encodeToJSON(),
            "X-EXTERNAL-JWT": X_EXTERNAL_JWT?.encodeToJSON(),
            "X-CORRELATION-ID": X_CORRELATION_ID?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IstanzaResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Recupera tutte le istanze numero rosso
     
     - parameter X_CLIENT_ID: (header) Identificativo del chiamante 
     - parameter X_EXTERNAL_JWT: (header) rappresenta il token applicativo nel quale gestire eventuali informazioni di contesto e sessione (optional)
     - parameter X_CORRELATION_ID: (header) identificativo richiesta, utilizzato per correlare tra loro una sequenza di eventi o azioni attivate da una singola richiesta web (optional)
     - parameter X_FULL: (header) indica se restituire tutta la risposta o solo una parte (optional)
     - parameter testPar: (query) booleano, se true restituisce solo il numero delle istanze che presentano risposte non lette (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getListIstanzeNumeroRosso(X_CLIENT_ID: String, X_EXTERNAL_JWT: String? = nil, X_CORRELATION_ID: String? = nil, X_FULL: Bool? = nil, testPar: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IstanzeListResponse?,_ error: Error?) -> Void)) {
        getListIstanzeNumeroRossoWithRequestBuilder(X_CLIENT_ID: X_CLIENT_ID, X_EXTERNAL_JWT: X_EXTERNAL_JWT, X_CORRELATION_ID: X_CORRELATION_ID, X_FULL: X_FULL, testPar: testPar).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recupera tutte le istanze numero rosso
     - GET /istanze
     - Ritorna la lista delle istanze numero rosso
     - API Key:
       - type: apiKey OAM_REMOTE_USER 
       - name: OHS
     - API Key:
       - type: apiKey X-EXTERNAL-REMOTE-USER 
       - name: OSB
     - parameter X_CLIENT_ID: (header) Identificativo del chiamante 
     - parameter X_EXTERNAL_JWT: (header) rappresenta il token applicativo nel quale gestire eventuali informazioni di contesto e sessione (optional)
     - parameter X_CORRELATION_ID: (header) identificativo richiesta, utilizzato per correlare tra loro una sequenza di eventi o azioni attivate da una singola richiesta web (optional)
     - parameter X_FULL: (header) indica se restituire tutta la risposta o solo una parte (optional)
     - parameter testPar: (query) booleano, se true restituisce solo il numero delle istanze che presentano risposte non lette (optional)
     - returns: RequestBuilder<IstanzeListResponse> 
     */
    open class func getListIstanzeNumeroRossoWithRequestBuilder(X_CLIENT_ID: String, X_EXTERNAL_JWT: String? = nil, X_CORRELATION_ID: String? = nil, X_FULL: Bool? = nil, testPar: String? = nil) -> RequestBuilder<IstanzeListResponse> {
        let path = "/istanze"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "testPar": testPar?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-CLIENT-ID": X_CLIENT_ID.encodeToJSON(),
            "X-EXTERNAL-JWT": X_EXTERNAL_JWT?.encodeToJSON(),
            "X-CORRELATION-ID": X_CORRELATION_ID?.encodeToJSON(),
            "X-FULL": X_FULL?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<IstanzeListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
